import heapq

def smallestRange(nums):
    # Initialize the heap with the first element of each list
    min_heap = []
    max_value = float('-inf')
    for i in range(len(nums)):
        heapq.heappush(min_heap, (nums[i][0], i, 0))
        max_value = max(max_value, nums[i][0])
    
    # Initialize the range with the largest possible range
    start, end = float('-inf'), float('inf')
    
    while min_heap:
        min_value, row, col = heapq.heappop(min_heap)
        
        # Update the range if the current range is smaller
        if max_value - min_value < end - start:
            start, end = min_value, max_value
        
        # If we have reached the end of one list, break
        if col + 1 == len(nums[row]):
            break
        
        # Insert the next element from the same list into the heap
        next_value = nums[row][col + 1]
        heapq.heappush(min_heap, (next_value, row, col + 1))
        max_value = max(max_value, next_value)
    
    return [start, end]

# Test cases
print(smallestRange([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]))  # Output: [20, 24]
print(smallestRange([[1, 2, 3], [1, 2, 3], [1, 2, 3]]))  # Output: [1, 1]
