def shortest_palindrome(s: str) -> str:
    def compute_lps(pattern: str) -> list[int]:
        lps = [0] * len(pattern)
        length = 0
        i = 1
        while i < len(pattern):
            if pattern[i] == pattern[length]:
                length += 1
                lps[i] = length
                i += 1
            else:
                if length != 0:
                    length = lps[length - 1]
                else:
                    lps[i] = 0
                    i += 1
        return lps

    if not s:
        return ""

    rev_s = s[::-1]
    combined = s + '#' + rev_s
    lps = compute_lps(combined)
    to_add = rev_s[:len(s) - lps[-1]]
    return to_add + s

# Test cases
print(shortest_palindrome("aacecaaa"))  # Output: "aaacecaaa"
print(shortest_palindrome("abcd"))      # Output: "dcbabcd"
